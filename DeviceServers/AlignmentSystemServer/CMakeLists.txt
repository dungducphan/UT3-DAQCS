#=============================================================================
#
# file :        CMakeLists.txt
#
# description : File to generate a TANGO device server using cmake.
#
# project :     AlignmentSystemServer
#
#=============================================================================
#                This file is generated by POGO
#        (Program Obviously used to Generate tango Object)
#=============================================================================
#
#
cmake_minimum_required (VERSION 3.20)
set(CMAKE_SKIP_RPATH TRUE)


# MAKE_ENV is the path to find common environment to build project
#
set(MAKE_ENV /usr/local/tango/share/pogo/preferences)
#
# Project definitions
#
project(AlignmentSystemServer)

if(${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    add_definitions(-DDEBUG_MODE)
endif()

#
# optional compiler flags
#
set(CXXFLAGS_USER -g)
add_definitions(-DPCO_LINUX)

#
# Get global information
#
include(${MAKE_ENV}/cmake_tango.opt)

#
# Tango Class list used by project
# ===============================================================================================================

#
# Files for BaslerCamera TANGO class
#
set(BASLERCAMERA  BaslerCamera)
set(BASLERCAMERA_PATH  ./Basler)
set(BASLERCAMERA_INCLUDE  ./Basler)
set(BASLERCAMERA_SRC  ${BASLERCAMERA_PATH}/${BASLERCAMERA}.cpp ${BASLERCAMERA_PATH}/${BASLERCAMERA}Class.cpp ${BASLERCAMERA_PATH}/${BASLERCAMERA}StateMachine.cpp)
#
# Files for PCOCamera TANGO class
#
set(PCOCAMERA  PCOCamera)
set(PCOCAMERA_PATH  ./PCO)
set(PCOCAMERA_INCLUDE  ./PCO)
set(PCOCAMERA_SRC  ${PCOCAMERA_PATH}/${PCOCAMERA}.cpp ${PCOCAMERA_PATH}/${PCOCAMERA}Class.cpp ${PCOCAMERA_PATH}/${PCOCAMERA}StateMachine.cpp)

# ===============================================================================================================

#
# User additional include, link folders/libraries and source files
#
set(PCO_CPP_DIR /opt/pco/pco.cpp)
set(USER_INCL_DIR ${PCO_CPP_DIR}/runtime/include ${PCO_CPP_DIR}/pco.camera)
set(USER_LIB_DIR ${PCO_CPP_DIR}/bin64)
set(USER_LIBS pcocam_usb pco_sc2cam pcocom pcocom_usb pco_recorder pco_convert)
set(USER_SRC_FILES
        ${PCO_CPP_DIR}/pco.camera/camera.cpp
        ${PCO_CPP_DIR}/pco.camera/cameraexception.cpp
        ${PCO_CPP_DIR}/pco.camera/stdafx.cpp
        ${PCO_CPP_DIR}/pco.camera/image.cpp)

find_package(pylon 7.1.0 REQUIRED)

#
# Set global info and include directories
#
set(ALL_CLASS_INCLUDE ${BASLERCAMERA_INCLUDE} ${PCOCAMERA_INCLUDE} )
set(SERVER_SRC ${BASLERCAMERA_SRC} ${PCOCAMERA_SRC}  ${USER_SRC_FILES} MultiClassesFactory.cpp main.cpp)
include_directories(${ALL_CLASS_INCLUDE}  ${USER_INCL_DIR} ${TANGO_INCLUDES})

#
# Device Server generation
#
set(SERVER_NAME AlignmentSystemServer)

#
#	Set library directories
#
link_directories(${USER_LIB_DIR} ${TANGO_LIB_HOME})

#
#	Compile and link
#
message("SERVER_NAME=${SERVER_NAME}")
message("SERVER_SRC=${SERVER_SRC}")
add_executable(${SERVER_NAME} ${SERVER_SRC})
target_link_libraries(${SERVER_NAME} ${USER_LIBS} ${TANGO_LIBS} pylon::pylon)
