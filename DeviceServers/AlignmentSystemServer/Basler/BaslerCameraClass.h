/*----- PROTECTED REGION ID(BaslerCameraClass.h) ENABLED START -----*/
//=============================================================================
//
// file :        BaslerCameraClass.h
//
// description : Include for the BaslerCamera root class.
//               This class is the singleton class for
//                the BaslerCamera device class.
//               It contains all properties and methods which the 
//               BaslerCamera requires only once e.g. the commands.
//
// project :     
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
//
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef BaslerCameraClass_H
#define BaslerCameraClass_H

#include <tango.h>
#include <BaslerCamera.h>


/*----- PROTECTED REGION END -----*/	//	BaslerCameraClass.h


namespace BaslerCamera_ns
{
/*----- PROTECTED REGION ID(BaslerCameraClass::classes for dynamic creation) ENABLED START -----*/


/*----- PROTECTED REGION END -----*/	//	BaslerCameraClass::classes for dynamic creation

//=========================================
//	Define classes for attributes
//=========================================
//	Attribute ExposureTime class definition
class ExposureTimeAttrib: public Tango::Attr
{
public:
	ExposureTimeAttrib():Attr("ExposureTime",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~ExposureTimeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaslerCamera *>(dev))->read_ExposureTime(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<BaslerCamera *>(dev))->write_ExposureTime(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaslerCamera *>(dev))->is_ExposureTime_allowed(ty);}
};

//	Attribute FrameRate class definition
class FrameRateAttrib: public Tango::Attr
{
public:
	FrameRateAttrib():Attr("FrameRate",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~FrameRateAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaslerCamera *>(dev))->read_FrameRate(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<BaslerCamera *>(dev))->write_FrameRate(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaslerCamera *>(dev))->is_FrameRate_allowed(ty);}
};

//	Attribute Gain class definition
class GainAttrib: public Tango::Attr
{
public:
	GainAttrib():Attr("Gain",
			Tango::DEV_DOUBLE, Tango::READ_WRITE) {};
	~GainAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaslerCamera *>(dev))->read_Gain(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<BaslerCamera *>(dev))->write_Gain(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaslerCamera *>(dev))->is_Gain_allowed(ty);}
};

//	Attribute TriggerMode class definition
class TriggerModeAttrib: public Tango::Attr
{
public:
	TriggerModeAttrib():Attr("TriggerMode",
			Tango::DEV_USHORT, Tango::READ_WRITE) {};
	~TriggerModeAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaslerCamera *>(dev))->read_TriggerMode(att);}
	virtual void write(Tango::DeviceImpl *dev,Tango::WAttribute &att)
		{(static_cast<BaslerCamera *>(dev))->write_TriggerMode(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaslerCamera *>(dev))->is_TriggerMode_allowed(ty);}
};

//	Attribute BeamProfileImg class definition
class BeamProfileImgAttrib: public Tango::ImageAttr
{
public:
	BeamProfileImgAttrib():ImageAttr("BeamProfileImg",
			Tango::DEV_USHORT, Tango::READ, 1280, 1024) {};
	~BeamProfileImgAttrib() {};
	virtual void read(Tango::DeviceImpl *dev,Tango::Attribute &att)
		{(static_cast<BaslerCamera *>(dev))->read_BeamProfileImg(att);}
	virtual bool is_allowed(Tango::DeviceImpl *dev,Tango::AttReqType ty)
		{return (static_cast<BaslerCamera *>(dev))->is_BeamProfileImg_allowed(ty);}
};


//=========================================
//	Define classes for commands
//=========================================
//	Command GrabImage class definition
class GrabImageClass : public Tango::Command
{
public:
	GrabImageClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out,
				   const char        *in_desc,
				   const char        *out_desc,
				   Tango::DispLevel  level)
	:Command(name,in,out,in_desc,out_desc, level)	{};

	GrabImageClass(const char   *name,
	               Tango::CmdArgType in,
				   Tango::CmdArgType out)
	:Command(name,in,out)	{};
	~GrabImageClass() {};
	
	virtual CORBA::Any *execute (Tango::DeviceImpl *dev, const CORBA::Any &any);
	virtual bool is_allowed (Tango::DeviceImpl *dev, const CORBA::Any &any)
	{return (static_cast<BaslerCamera *>(dev))->is_GrabImage_allowed(any);}
};


/**
 *	The BaslerCameraClass singleton definition
 */

#ifdef _TG_WINDOWS_
class __declspec(dllexport)  BaslerCameraClass : public Tango::DeviceClass
#else
class BaslerCameraClass : public Tango::DeviceClass
#endif
{
	/*----- PROTECTED REGION ID(BaslerCameraClass::Additionnal DServer data members) ENABLED START -----*/
	
	
	/*----- PROTECTED REGION END -----*/	//	BaslerCameraClass::Additionnal DServer data members

	public:
		//	write class properties data members
		Tango::DbData	cl_prop;
		Tango::DbData	cl_def_prop;
		Tango::DbData	dev_def_prop;
	
		//	Method prototypes
		static BaslerCameraClass *init(const char *);
		static BaslerCameraClass *instance();
		~BaslerCameraClass();
		Tango::DbDatum	get_class_property(string &);
		Tango::DbDatum	get_default_device_property(string &);
		Tango::DbDatum	get_default_class_property(string &);
	
	protected:
		BaslerCameraClass(string &);
		static BaslerCameraClass *_instance;
		void command_factory();
		void attribute_factory(vector<Tango::Attr *> &);
		void pipe_factory();
		void write_class_property();
		void set_default_property();
		void get_class_property();
		string get_cvstag();
		string get_cvsroot();
	
	private:
		void device_factory(const Tango::DevVarStringArray *);
		void create_static_attribute_list(vector<Tango::Attr *> &);
		void erase_dynamic_attributes(const Tango::DevVarStringArray *,vector<Tango::Attr *> &);
		vector<string>	defaultAttList;
		Tango::Attr *get_attr_object_by_name(vector<Tango::Attr *> &att_list, string attname);
};

}	//	End of namespace

#endif   //	BaslerCamera_H
